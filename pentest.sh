#!/bin/bash

# Função para rodar comandos no terminal e verificar erros
run_command() {
    local command="$1"
    local output_file="$2"

    echo "Executando: $command"
    if [ -n "$output_file" ]; then
        # Executa e redireciona a saída para o arquivo
        eval "$command" >> "$output_file" 2>&1
    else
        # Executa normalmente
        eval "$command"
    fi
    
    if [[ $? -ne 0 ]]; then
        echo "Erro na execução de: $command"
        exit 1
    fi
}

# Função para verificar e instalar ferramentas
check_and_install_tool() {
    local tool="$1"
    local install_command="$2"
    
    echo "Verificando se a ferramenta $tool está instalada..."
    if ! command -v "$tool" &> /dev/null; then
        echo "Ferramenta $tool não encontrada. Instalando..."
        run_command "$install_command"
    else
        echo "Ferramenta $tool já está instalada."
    fi
}

# Função para limpar caracteres não imprimíveis ou especiais no arquivo
clean_file() {
    local file_path="$1"
    
    echo "Limpando caracteres não imprimíveis em $file_path..."
    sed -i 's/[^[:print:]\t]//g' "$file_path"
}

# Verifica se o script está sendo executado como root
if [[ $(id -u) -ne 0 ]]; then
    echo "Este script precisa ser executado como root ou com sudo."
    exit 1
fi

# Verificar e instalar ferramentas necessárias
check_and_install_tool "chkrootkit" "sudo apt update && sudo apt install chkrootkit -y"
check_and_install_tool "rkhunter" "sudo apt update && sudo apt install rkhunter -y && sudo rkhunter --update"
check_and_install_tool "nmap" "sudo apt update && sudo apt install nmap -y"
check_and_install_tool "nikto" "sudo apt update && sudo apt install nikto -y"
check_and_install_tool "searchsploit" "sudo apt update && sudo apt install exploitdb -y && searchsploit --update"
check_and_install_tool "sslscan" "sudo apt update && sudo apt install sslscan -y"
check_and_install_tool "netcat" "sudo apt update && sudo apt install netcat -y"

# Verificar se o pandoc e LaTeX (pdflatex) estão instalados
if ! command -v pandoc &> /dev/null; then
    echo "Pandoc não encontrado. Instale o Pandoc para gerar o relatório PDF."
    exit 1
fi

if ! command -v pdflatex &> /dev/null; then
    echo "LaTeX não encontrado. O Pandoc precisa do LaTeX para gerar PDFs. Instale o pacote TeX Live."
    exit 1
fi

# Diretório de saída
output_folder="/mnt/c/Users/Usuario/Downloads/pentest_results"
mkdir -p "$output_folder"

# Gerar timestamp para os arquivos
timestamp=$(date +"%Y-%m-%d_%H-%M")

# Arquivo de relatório Markdown
report_file_md="$output_folder/pentest_report_$timestamp.md"
echo "---" > "$report_file_md"
echo "title: \"Relatório de Pentest\"" >> "$report_file_md"
echo "author: \"Script Automático\"" >> "$report_file_md"
echo "date: \"$timestamp\"" >> "$report_file_md"
echo "output: pdf_document" >> "$report_file_md"
echo "---" >> "$report_file_md"
echo "" >> "$report_file_md"

# Início do relatório
echo "# Relatório de Pentest" >> "$report_file_md"
echo "Gerado em: $timestamp" >> "$report_file_md"
echo "" >> "$report_file_md"

# Secção 1: Informações do Sistema
echo "## 1. Informações do Sistema" >> "$report_file_md"
echo "### Sistema Operacional" >> "$report_file_md"
run_command "uname -a" "$report_file_md"
run_command "cat /etc/os-release" "$report_file_md"

# Secção 2: Segurança Local
echo "" >> "$report_file_md"
echo "## 2. Segurança Local" >> "$report_file_md"
echo "### Verificação de Rootkits" >> "$report_file_md"
run_command "chkrootkit" "$report_file_md"
run_command "rkhunter --check" "$report_file_md"

# Secção 3: Segurança de Rede
echo "" >> "$report_file_md"
echo "## 3. Segurança de Rede" >> "$report_file_md"
echo "### Varredura de Portas (Nmap)" >> "$report_file_md"
run_command "nmap -sS -sV -O localhost" "$report_file_md"

echo "" >> "$report_file_md"
echo "### Varredura de Serviços Web (Nikto)" >> "$report_file_md"
run_command "nikto -h localhost" "$report_file_md"

# Secção 4: Vulnerabilidades Conhecidas
echo "" >> "$report_file_md"
echo "## 4. Vulnerabilidades Conhecidas" >> "$report_file_md"
run_command "searchsploit --offline" "$report_file_md"

# Secção 5: SSL e Configurações de Rede
echo "" >> "$report_file_md"
echo "## 5. Configurações SSL e Rede" >> "$report_file_md"
run_command "sslscan localhost" "$report_file_md"
run_command "netcat -z -v localhost 1-65535" "$report_file_md"

# Limpeza de caracteres não imprimíveis
clean_file "$report_file_md"

# Gerar PDF com Pandoc
report_file_pdf="$output_folder/pentest_report_$timestamp.pdf"
pandoc "$report_file_md" -o "$report_file_pdf"

# Mensagem final
if [[ $? -eq 0 ]]; then
    echo "Relatório completo gerado em PDF: $report_file_pdf"
else
    echo "Erro ao gerar o relatório em PDF. Verifique se o Pandoc e o LaTeX estão instalados."
    exit 1
fi
